name: Publish to NuGet

on:
  release:
    types: [published]

env:
  NuGetDirectory: '${{github.workspace}}/.nuget'
  Version: ${{ github.event.release.tag_name }}

defaults:
  run:
    shell: pwsh

jobs:
  pack_nuget:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4.1.1
    - name: Setup NuGet.exe for use with actions
      uses: NuGet/setup-nuget@v1.2.0
    # Create the NuGet package
    - name: Nuget pack
      run: nuget pack Templates.WebApi.nuspec -OutputDirectory ${{ env.NuGetDirectory }} -Version ${{ env.Version }}

    # Publish the NuGet package as an artifact, so they can be used in the following jobs
    - uses: actions/upload-artifact@v4.3.0
      with:
        name: Templates.WebApi.${{ env.Version }}.nupkg
        if-no-files-found: error
        retention-days: 5
        path: ${{ env.NuGetDirectory }}/Templates.WebApi.${{ env.Version }}.nupkg
  
  publish_nuget:
    # Publish only when creating a GitHub Release
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    needs: [ pack_nuget ]
    steps:
      # Download the NuGet package created in the previous job
      - uses: actions/download-artifact@v4.1.1
        with:
          name: Templates.WebApi.${{ env.Version }}.nupkg
          path: ${{ env.NuGetDirectory }}

      # Install the .NET SDK indicated in the global.json file
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4.0.0

      # Publish all NuGet packages to NuGet.org
      # Use --skip-duplicate to prevent errors if a package with the same version already exists.
      # If you retry a failed workflow, already published packages will be skipped without error.
      - name: Publish NuGet package
        run: dotnet nuget push ${{ env.NuGetDirectory }}/Templates.WebApi.${{ env.Version }}.nupkg --api-key ${{secrets.nuget_api_key}} --source https://api.nuget.org/v3/index.json --skip-duplicate
